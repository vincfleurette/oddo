<?php

/**
 * Script de nettoyage pour supprimer tous les fichiers de debug
 */

declare(strict_types=1);

echo "üßπ Nettoyage du projet Oddo Slim API\n";
echo "=====================================\n\n";

$rootDir = dirname(__DIR__);
$cleaned = [];
$errors = [];

// Fichiers √† supprimer (patterns)
$filesToDelete = [
    // Fichiers de debug temporaires
    "debug_*.php",
    "test_*.php",
    "minimal_*.php",

    // Logs de d√©veloppement
    "*.log",
    "debug.txt",

    // Fichiers de cache temporaires
    "storage/debug_*",
    "storage/test_*",
];

// Dossiers √† nettoyer
$dirsToClean = ["storage", "public", "src"];

function deleteFiles(string $pattern, string $baseDir): array
{
    $deleted = [];
    $files = glob($baseDir . "/" . $pattern);

    foreach ($files as $file) {
        if (is_file($file)) {
            if (unlink($file)) {
                $deleted[] = $file;
            }
        }
    }

    return $deleted;
}

function cleanDirectory(string $dir, array $patterns): array
{
    $cleaned = [];

    if (!is_dir($dir)) {
        return $cleaned;
    }

    foreach ($patterns as $pattern) {
        $files = deleteFiles($pattern, $dir);
        $cleaned = array_merge($cleaned, $files);
    }

    return $cleaned;
}

// Nettoyer les fichiers de debug dans chaque dossier
foreach ($dirsToClean as $dir) {
    $fullPath = $rootDir . "/" . $dir;
    echo "üîç Nettoyage de $dir/\n";

    $deletedFiles = cleanDirectory($fullPath, $filesToDelete);

    if (!empty($deletedFiles)) {
        foreach ($deletedFiles as $file) {
            echo "   ‚úÖ Supprim√©: " . basename($file) . "\n";
            $cleaned[] = $file;
        }
    } else {
        echo "   ‚ú® D√©j√† propre\n";
    }
}

// Nettoyer les fichiers de cache expir√©s
echo "\nüóëÔ∏è  Nettoyage du cache expir√©\n";
$storageDir = $rootDir . "/storage";

if (is_dir($storageDir)) {
    $cacheFiles = glob($storageDir . "/*.json");
    $now = time();

    foreach ($cacheFiles as $file) {
        $content = file_get_contents($file);
        $data = json_decode($content, true);

        if (isset($data["ttl"]) && $data["ttl"] > 0) {
            $timestamp = strtotime($data["timestamp"]);
            $expiry = $timestamp + $data["ttl"];

            if ($now > $expiry) {
                if (unlink($file)) {
                    echo "   ‚úÖ Cache expir√© supprim√©: " .
                        basename($file) .
                        "\n";
                    $cleaned[] = $file;
                }
            }
        }
    }
}

// Optimiser l'autoloader Composer
echo "\n‚ö° Optimisation de l'autoloader\n";
$composerCmd = "composer dump-autoload --optimize";
exec($composerCmd, $output, $returnCode);

if ($returnCode === 0) {
    echo "   ‚úÖ Autoloader optimis√©\n";
} else {
    echo "   ‚ùå Erreur lors de l'optimisation\n";
    $errors[] = "Composer optimization failed";
}

// V√©rifier les permissions du dossier storage
echo "\nüîí V√©rification des permissions\n";
if (is_dir($storageDir)) {
    if (is_writable($storageDir)) {
        echo "   ‚úÖ storage/ est accessible en √©criture\n";
    } else {
        echo "   ‚ö†Ô∏è  storage/ n'est pas accessible en √©criture\n";
        echo "      Ex√©cutez: chmod 755 storage/\n";
    }
} else {
    echo "   üìÅ Cr√©ation du dossier storage/\n";
    if (mkdir($storageDir, 0755, true)) {
        echo "   ‚úÖ Dossier storage/ cr√©√©\n";
    } else {
        echo "   ‚ùå Impossible de cr√©er storage/\n";
        $errors[] = "Cannot create storage directory";
    }
}

// V√©rifier la configuration
echo "\n‚öôÔ∏è  V√©rification de la configuration\n";
$envFile = $rootDir . "/.env";

if (file_exists($envFile)) {
    echo "   ‚úÖ Fichier .env trouv√©\n";

    // V√©rifier les variables critiques
    $envContent = file_get_contents($envFile);
    $requiredVars = ["ODDO_BASE_URI", "JWT_SECRET"];

    foreach ($requiredVars as $var) {
        if (strpos($envContent, $var . "=") !== false) {
            echo "   ‚úÖ $var configur√©\n";
        } else {
            echo "   ‚ö†Ô∏è  $var manquant dans .env\n";
        }
    }
} else {
    echo "   ‚ö†Ô∏è  Fichier .env manquant\n";
    echo "      Ex√©cutez: cp .env.example .env\n";
}

// R√©sum√©
echo "\nüìä R√©sum√© du nettoyage\n";
echo "=====================\n";
echo "Fichiers supprim√©s: " . count($cleaned) . "\n";

if (!empty($errors)) {
    echo "Erreurs: " . count($errors) . "\n";
    foreach ($errors as $error) {
        echo "   ‚ùå $error\n";
    }
}

if (empty($cleaned) && empty($errors)) {
    echo "‚ú® Projet d√©j√† propre et optimis√©!\n";
} elseif (empty($errors)) {
    echo "‚úÖ Nettoyage termin√© avec succ√®s!\n";
} else {
    echo "‚ö†Ô∏è  Nettoyage termin√© avec des avertissements.\n";
}

echo "\nüöÄ Projet pr√™t pour la production!\n";
